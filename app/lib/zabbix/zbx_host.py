#!/usr/bin/env python# -*- coding: utf-8 -*-# Author: Yuanbin# Datetime: 20180109from __init__ import *class Host:    def __init__(self, zbx_base=None):        self.url = zbx_base.url        self.header = zbx_base.header        self.authID = zbx_base.authID    def create(self, **kwargs):        #         "params": {        #             "host": host,        #             "interfaces": [        #                 {        #                     "type": 1,        #                     "main": 1,        #                     "useip": 1,        #                     "ip": ip,        #                     "dns": "",        #                     "port": "10050"        #                 }        #             ],        #             "groups": [{"groupid": group_id}],        #             "templates": [{"templateid": template_id}],        #         }        try:            obj = self.zb.json_obj('host.delete', kwargs, auth=True)            result = self.zb.do_request(obj)            ret_create = result.get('result')            return ret_create        except Exception, e:            message = u'创建主机失败 - %s ' % str(e)            traceback.print_exc(message)            return False    def delete(self, *args):        # json_data = {"jsonrpc": "2.0", "method": "host.delete", "auth": self.authID, "id": 1, 'params': list(args)}        # data = json.dumps(json_data)        try:            obj = self.zb.json_obj('host.delete', args, auth=True)            result = self.zb.do_request(obj)            ret_delete = result.get('result')            return ret_delete        except Exception, e:            message = u'删除主机失败 - %s ' % str(e)            traceback.print_exc(message)            return False    def get(self, **kwargs):        json_data = {            "jsonrpc": "2.0",            "method": "host.get",            "params": {                "output": "extend",                "filter": {                    "host": 'PBS10-80-20-231'                }            },            "auth": self.authID,            "id": 1        }        for k, v in kwargs.items():            json_data['params'][k] = v        data = json.dumps(json_data)        try:            result = requests.post(self.url, data=data, headers=self.header)            response = json.loads(result.content)            res = response['result']            if (res != 0) and (len(res) != 0):                host_res = response['result']                # print "主机获取信息成功:\t%s" % host_res        except Exception, e:            message = u'获取主机（Get host failure）失败!'            print message, e            traceback.print_exc()            return False        return host_res    def update(self, **kwargs):        json_data = {            "jsonrpc": "2.0",            "method": "host.update",            "params": {},            "auth": self.authID,            "id": 1        }        for k, v in kwargs.items():            json_data['params'][k] = v        data = json.dumps(json_data)        try:            result = requests.post(self.url, data=data, headers=self.header)            response = json.loads(result.content)            res = response['result']            if (res != 0) and (len(res) != 0):                host_res = response['result']            print "主机信息更新成功:\t%s" % host_res        except Exception, e:            message = u'更新主机（Update host failure）失败!'            print message, e            traceback.print_exc()            return False        return host_res