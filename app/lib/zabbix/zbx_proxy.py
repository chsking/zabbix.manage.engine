#!/usr/bin/env python# -*- coding: utf-8 -*-# Author: Yuanbin# Datetime: 20180110from __init__ import *class Proxy:    def __init__(self, zbx_base):        self.url = zbx_base.url        self.header = zbx_base.header        self.authID = zbx_base.authID    def create(self, **kwargs):        # status:        #  5 - active proxy        #  6 - passive proxy        json_data = {            "jsonrpc": "2.0",            "method": "proxy.create",            "params": {},            "auth": self.authID,            "id": 1        }        for k, v in kwargs.items():            json_data['params'][k] = v        data = json.dumps(json_data)        try:            result = requests.post(self.url, data=data, headers=self.header)            response = json.loads(result.content)            res = response['result']            if (res != 0) and (len(res) != 0):                proxy_res = response['result']                print "创建proxy代理成功:\t%s" % proxy_res                return proxy_res        except Exception as e:            message = "创建Proxy代理（Create Proxy failure）失败!"            print message, e        return False    def delete(self, *args):        json_data = {            "jsonrpc": "2.0",            "method": "proxy.delete",            "params": [],            "auth": self.authID,            "id": 1        }        json_data['params'].extend(args)        data = json.dumps(json_data)        try:            result = requests.post(self.url, data=data, headers=self.header)            response = json.loads(result.content)            res = response['result']            if (res != 0) and (len(res) != 0):                proxy_res = response['result']                print "删除proxy代理成功:\t%s" % proxy_res                return proxy_res        except Exception as e:            message = "删除Proxy代理（Create Proxy failure）失败!"            print message, e        return False    def get(self, **kwargs):        json_data = {            "jsonrpc": "2.0",            "method": "proxy.get",            "params": {},            "auth": self.authID,            "id": 1        }        for k, v in kwargs.items():            json_data['params'][k] = v        data = json.dumps(json_data)        try:            result = requests.post(self.url, data=data, headers=self.header)            response = json.loads(result.content)            res = response['result']            if (res != 0) and (len(res) != 0):                proxy_res = response['result']                print "获取proxy代理成功:\t%s" % proxy_res                return proxy_res        except Exception as e:            message = u"获取Proxy代理（Create Proxy failure）失败!"            print message, e        return False    def update(self, **kwargs):        json_data = {            "jsonrpc": "2.0",            "method": "proxy.update",            "params": {},            "auth": self.authID,            "id": 1        }        for k, v in kwargs.items():            json_data['params'][k] = v        data = json.dumps(json_data)        try:            result = requests.post(self.url, data=data, headers=self.header)            response = json.loads(result.content)            res = response['result']            if (res != 0) and (len(res) != 0):                proxy_res = response['result']                print u"更新proxy代理成功:\t%s" % proxy_res                return proxy_res        except Exception, e:            message = u"更新Proxy代理（Create Proxy failure）失败!"            print message, e        return False