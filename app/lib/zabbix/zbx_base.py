#!/usr/bin/env python# -*- coding: utf-8 -*-# Author: Yuanbin# Datetime: 20180109import ConfigParserimport base64import hashlibimport stringimport timefrom __init__ import *reload(sys)sys.setdefaultencoding("utf-8")# configure parameterconf = ConfigParser.ConfigParser()conf.read("config.ini")class ZabbixAPIException(Exception):    """ generic zabbix api exception    code list:         -32602 - Invalid params (eg already exists)         -32500 - no permissions    """    passclass ZabbixBase:    __username__ = ''    __password__ = ''    auth = ''    __timestamp__ = int(time.time())    url = '/api_jsonrpc.php'    params = None    method = None    # HTTP or HTTPS    proto = 'http'    # HTTP authentication    httpuser = None    httppasswd = None    timeout = 10    validate_certs = None    def __init__(self, env):        self.header = {"Content-Type": "application/json"}        self.server = conf.get(env, 'server')        self.httpuser = conf.get(env, 'username')        self.httppasswd = conf.get(env, 'password')        self.url = "http://%s/api_jsonrpc.php" % self.server        # self.authID = self.login()        self.kwargs = {}        self.id = 0    def json_obj(self, method, params={}, auth=True):        obj = {'jsonrpc': '2.0',               'method': method,               'params': params,               'auth': self.auth,               'id': self.id}        if not auth:            del obj['auth']        # current_app.logger.debug("json_obj: " + str(obj))        return json.dumps(obj)    def login(self, user='', password='', save=True):        if user != '':            l_user = user            l_password = password            if save:                self.__username__ = user                self.__password__ = password        elif self.__username__ != '':            l_user = self.__username__            l_password = self.__password__        else:            raise ZabbixAPIException("No authentication information available.")        # don't print the raw password.        hashed_pw_string = "md5(" + hashlib.md5(l_password.encode('utf-8')).hexdigest() + ")"        # current_app.logger.debug("Trying to login with %s:%s" % (repr(l_user), repr(hashed_pw_string)))        obj = self.json_obj('user.login', {'user': l_user, 'password': l_password}, auth=False)        result = self.do_request(obj)        self.auth = result['result']    def test_login(self):        if self.auth != '':            obj = self.json_obj('user.checkAuthentication', {'sessionid': self.auth})            result = self.do_request(obj)            if not result['result']:                self.auth = ''                return False  # auth hash bad            return True  # auth hash good        else:            return False    def do_request(self, json_obj, num_retries=3):        headers = {'Content-Type': 'application/json-rpc', 'User-Agent': 'python/zabbix_api'}        if self.httpuser:            # current_app.logger.info("HTTP Auth enabled")            auth = 'Basic ' + string.strip(base64.encodestring(self.httpuser + ':' + self.httppasswd))            headers['Authorization'] = auth        # current_app.logger.info("Sending: " + str(json_obj))        # current_app.logger.debug("Sending headers: " + str(headers))        request = requests.post(url=self.url, data=json_obj.encode('utf-8'), headers=headers)        response = json.loads(request.content)        try:            response = json.loads(request.content)        except Exception as e:            if num_retries>0:                return self.do_request(json_obj,num_retries-1)            raise ZabbixAPIException("requests - %s" % e)        # current_app.logger.info("Response Code: " + str(response.code))        # NOTE: Getting a 412 response code means the headers are not in the        # list of allowed headers.        if request.status_code != 200:            raise ZabbixAPIException("HTTP ERROR %s: %s" % (response.status, response.reason))        if len(response) == 0:            raise ZabbixAPIException("Received zero answer")        # current_app.logger.info("Response Body: " + str(jobj))        self.id += 1        return response    # def request_json(self, data):    #     data = json.dumps(data)    #     request = requests.post(self.url, data, self.header)    #     response = json.loads(request.content)    #     try:    #         message = response['result']    #     except Exception as e:    #         message = response['error']['data']    #         print message    #         traceback.print_exc(e)    #     return message    #    # def user_login(self):    #     data = {    #         "jsonrpc": "2.0",    #         "method": "user.login",    #         "params": {    #             "user": self.username,    #             "password": self.password    #             },    #         "id": 0    #     }    #     # request = requests.post(self.url, data=data, headers=self.header)    #     # response = json.loads(request.content)    #     # auth_id = response['result']    #     auth_id = self.request_json(data)    #     return auth_idif __name__ == '__main__':    zb = ZabbixBase('zbx-prod')    zb.login('bin.yuan', '123456')    print zb.__username__, zb.__password__, zb.auth    print zb.test_login()