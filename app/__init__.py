# -*- coding: utf-8 -*-import loggingimport osimport refrom logging.handlers import SMTPHandlerfrom logging.handlers import TimedRotatingFileHandlerfrom flask import Flaskfrom flask_wtf import CsrfProtectfrom views import *from lib import *from extensions import db, bootstrap, moment, login_managerAPP_NAME = "zabbix_me"app_logo = r'''           _     _     _        __  __ _____  ______ _| |__ | |__ (_)_  __ |  \/  | ____| |_  / _` | '_ \| '_ \| \ \/ / | |\/| |  _|  / / (_| | |_) | |_) | |>  <  | |  | | |___ /___\__,_|_.__/|_.__/|_/_/\_\ |_|  |_|_____|VERSION: %sAUTHORS: %sCOMMENT: %s''' % ('V1.0', 'bin.yuan', '监控管理引擎-2018')MODULES = (    # (app.view.index.index, "/"),    # (app.view.login.login, "/login"),    # (app.view.util.util, "/util"),    # (app.view.zstack.zstack, "/zstack"),    # (app.view.maintain.op_vm.op_vm, "/maintain/op_vm"),    # (app.view.maintain.op_record.op_record, "/maintain/op_record"),    # (app.view.resource.physical_machine.physical_machine, "/resource/physical_machine"),    # (app.view.resource.cloud_host.cloud_host, "/resource/cloud_host"),    # (app.view.resource.cluster.cluster, "/resource/cluster"),    # (app.view.resource.operate_logs.operator_logs, "/resource/operate_logs"),    # (app.view.resource.image.image, "/resource/image"),    # # (app.view.resource.zone.zone, "/resource/zone"),    # (app.view.resource.zstack_common.zstack_common, "/resource/zstack"),    # (app.view.resource.physical_host_resource.phyhostresource, "/resource/phyHostResource"),)def os_hostname():    sys = os.name    if sys == 'nt':        hostname = os.getenv('computername')        return hostname    elif sys == 'posix':        host = os.popen('echo $HOSTNAME')        try:            hostname = host.read()            return hostname        finally:            host.close()    else:        return 'Unkwon hostname'def make_app(config=None, modules=None):    if not modules:        modules = MODULES    app = Flask(APP_NAME)    app.config.from_object(config)    configure_extensions(app)    configure_blueprints(app, modules)    configure_logging(app)    CsrfProtect(app)    bootstrap.init_app(app)    moment.init_app(app)    login_manager.init_app(app)    return appdef configure_extensions(app):    db.init_app(app)def configure_modules(app, modules):    for module, url_prefix in modules:        app.register_module(module, url_prefix=url_prefix)def configure_blueprints(app, modules):    for module, url_prefix in modules:        app.register_blueprint(module, url_prefix=url_prefix)def configure_logging(app):    hostname = os_hostname()    mail_handler = SMTPHandler(        app.config['MAIL_SERVER'],        app.config['MAIL_SENDER'],        app.config['ADMINS'],        '[%s] portal.ops.ui error' % hostname,        (            app.config['MAIL_USER'],            app.config['MAIL_PASSWORD'],        )    )    mail_formater = logging.Formatter(        "%(asctime)s %(levelname)s %(pathname)s %(lineno)d\n%(message)s")    mail_handler.setFormatter(mail_formater)    mail_handler.setLevel(logging.ERROR)    if not app.debug:        app.logger.addHandler(mail_handler)    formatter = logging.Formatter("%(asctime)s %(name)s %(levelname)s [%(filename)s %(lineno)d] - %(message)s")    log_file = app.config['LOG_PATH']    file_handler = TimedRotatingFileHandler(filename=log_file + 'zabbix_me', when='d', interval=1, backupCount=7)    file_handler.suffix = "%Y-%m-%d_%H-%M.log"    file_handler.extMatch = re.compile(r"^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}.log$")    file_handler.setLevel(getattr(logging, app.config['LOG_LEVEL']))    file_handler.setFormatter(formatter)    app.logger.addHandler(file_handler)    app.logger.setLevel(getattr(logging, app.config['LOG_LEVEL']))    app.logger.info(str(app_logo))